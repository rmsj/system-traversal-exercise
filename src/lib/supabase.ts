/**
 * Supabase client configuration
 * Generated by Roo
 */
import { createClient } from '@supabase/supabase-js';
import type {Database, InterfacesData} from '@/types/supabase'

// Get environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string;

export type SystemInsert = Database['public']['Tables']['systems']['Insert']
export type SystemUpdate = Database['public']['Tables']['systems']['Update']
export type SystemRow = Database['public']['Tables']['systems']['Row']

export type SystemInterfaceInsert = Database['public']['Tables']['system_interfaces']['Insert']
export type SystemInterfaceUpdate = Database['public']['Tables']['system_interfaces']['Update']
export type SystemInterfaceRow = Database['public']['Tables']['system_interfaces']['Row']

// Create Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

export async function getSystemById(id: number): Promise<SystemRow | null> {
    const { data, error } = await supabase
        .from('systems')
        .select('*')
        .eq('id', id)
        .single()

    if (error) {
        console.error('Fetch failed:', error.message)
        return null
    }

    return data
}

export async function insertSystem(data: SystemInsert): Promise<SystemRow> {
    const { data: result, error } = await supabase
        .from('systems')
        .insert(data)
        .select()
        .single()

    if (error) {
        console.error('Insert system failed:', error.message)
        throw error
    }

    return result
}

export async function updateSystem(id: number, updates: SystemUpdate): Promise<SystemRow> {
    const { data, error } = await supabase
        .from('systems')
        .update(updates)
        .eq('id', id)
        .select()
        .single()

    if (error) {
        console.error('Update system failed:', error.message)
        throw error
    }

    return data
}

export async function deleteSystem(id: number): Promise<boolean> {
    const { error } = await supabase
        .from('systems')
        .delete()
        .eq('id', id)

    if (error) {
        console.error('Delete system failed:', error.message)
        throw error
    }

    return true
}

export async function getSystemsByParentID(parentID: number): Promise<SystemRow[]> {
    const { data, error } = await supabase
        .from('systems')
        .select('*')
        .eq('parent_id', parentID)

    if (error) {
        console.error('Fetch by parent id failed:', error.message)
        return []
    }

    return data
}

// return all top layer systems for the initial state of the diagram
export async function getCurrentAndAllChildrenSystems(systemId: number): Promise<SystemRow[]> {
    const { data, error } = await supabase
        .from('systems')
        .select('*')
        .or(`id.eq.${systemId},parent_id.eq.${systemId}`)
        .order('id', {
            ascending: false,
        })

    if (error) {
        console.error('Fetch all current and children systems failed:', error.message)
        return []
    }

    return data
}

// return all systems
export async function getAllSystems(): Promise<SystemRow[]> {
    const { data, error } = await supabase
        .from('systems')
        .select('*')

    if (error) {
        console.error('Fetch all failed:', error.message)
        return []
    }

    return data
}

// return all top layer systems for the initial state of the diagram
export async function getTopLevelSystems(): Promise<SystemRow[]> {
    const { data, error } = await supabase
        .from('systems')
        .select('*')
        .is('parent_id', null)

    if (error) {
        console.error('Fetch all top layer systems failed:', error.message)
        return []
    }

    return data
}

// return all top layer systems for the initial state of the diagram
export async function getTopLevelSystemsAndChildren(): Promise<SystemRow[]> {
    const ids = []
    const topLevelSystems= await getTopLevelSystems()
    ids.push(...topLevelSystems.map(tl => tl.id))

    // Build OR query string
    const orConditions = [
        ...ids.map(id => `parent_id.eq.${id}`)
    ].join(',')

    const { data: children, error } = await supabase
        .from('systems')
        .select('*')
        .or(orConditions)
        .order('id', {
            ascending: false,
        })

    if (error) {
        console.error('Fetch all top layer systems with children failed:', error.message)
        return []
    }

    return [...topLevelSystems, ...children]
}

export async function insertSystemInterface(data: SystemInterfaceInsert):Promise<SystemInterfaceRow> {
    const { data: result, error } = await supabase
        .from('system_interfaces')
        .insert(data)
        .select()
        .single()

    if (error) {
        console.error('Insert system interface failed:', error.message)
        throw error
    }

    return result
}

export async function updateSystemInterface(sourceId : number, targetId : number, updates: SystemInterfaceUpdate): Promise<SystemInterfaceRow> {
    const { data, error } = await supabase
        .from('system_interfaces')
        .update(updates)
        .eq('source_system_id', sourceId)
        .eq('target_system_id', targetId)
        .select()
        .single()

    if (error) {
        console.error('Update system interface failed:', error.message)
        throw error
    }

    return data
}

export async function deleteSystemInterface(sourceId : number, targetId : number): Promise<boolean> {
    const { error } = await supabase
        .from('system_interfaces')
        .delete()
        .eq('source_system_id', sourceId)
        .eq('target_system_id', targetId)

    if (error) {
        console.error('Delete system interface failed:', error.message)
        throw error
    }

    return true
}

export async function getAllInterfacesForSystemAndChildren(systemId : number):Promise<InterfacesData[] | null> {

    const ids = [systemId]
    const children = await getSystemsByParentID(systemId)
    ids.push(...children.map(c => c.id))

    // Build OR query string
    const orConditions = [
        ...ids.map(id => `source_system_id.eq.${id}`),
        ...ids.map(id => `target_system_id.eq.${id}`)
    ].join(',')

    const { data, error } = await supabase
        .from('system_interfaces')
        .select(`
    source_system_id,
    target_system_id,
    connection_type,
    directional,
    source:source_system_id ( id, name, category, parent_id ),
    target:target_system_id ( id, name, category, parent_id )
  `)
        .or(orConditions)

    if (error) {
        console.error('Error fetching interfaces:', error)
        return null
    }

    return data as unknown as InterfacesData[]
}

export async function getAllInterfacesForSystem(systemId : number):Promise<InterfacesData[] | null> {

    const ids = [systemId]

    // Build OR query string
    const orConditions = [
        ...ids.map(id => `source_system_id.eq.${id}`),
        ...ids.map(id => `target_system_id.eq.${id}`)
    ].join(',')

    const { data, error } = await supabase
        .from('system_interfaces')
        .select(`
    source_system_id,
    target_system_id,
    connection_type,
    directional,
    source:source_system_id ( id, name, category, parent_id ),
    target:target_system_id ( id, name, category, parent_id )
  `)
        .or(orConditions)

    if (error) {
        console.error('Error fetching interfaces:', error)
        return null
    }

    return data as unknown as InterfacesData[]
}

export async function getTopLevelInterfaces(): Promise<InterfacesData[]> {
    // First get all top-level systems
    const { data: systems, error: systemError } = await supabase
        .from('systems')
        .select('id')
        .is('parent_id', null)

    if (systemError || !systems) {
        console.error('Failed to fetch top-level systems:', systemError)
        return []
    }

    const ids = systems.map(s => s.id)

    // Build OR condition for interfaces between top-level systems
    const orConditions = [
        ...ids.map(id => `source_system_id.eq.${id}`),
        ...ids.map(id => `target_system_id.eq.${id}`)
    ].join(',')

    const { data, error } = await supabase
        .from('system_interfaces')
        .select(`
      source_system_id,
      target_system_id,
      connection_type,
      directional,
      source:source_system_id ( id, name, category, parent_id ),
      target:target_system_id ( id, name, category, parent_id )
    `)
        .or(orConditions)

    if (error) {
        console.error('Error fetching top-level interfaces:', error)
        return []
    }

    // Filter to only those where both ends are top-level
    return data as unknown as InterfacesData[]
}