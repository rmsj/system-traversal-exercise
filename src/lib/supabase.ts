/**
 * Supabase client configuration
 * Generated by Roo
 */
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase'

// Get environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string;

export type SystemInsert = Database['public']['Tables']['systems']['Row']
export type SystemUpdate = Database['public']['Tables']['systems']['Update']
export type SystemRow = Database['public']['Tables']['systems']['Row']

// Create Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

export async function getSystemById(id: number): Promise<SystemRow | null> {
    const { data, error } = await supabase
        .from('systems')
        .select('*')
        .eq('id', id)
        .single()

    if (error) {
        console.error('Fetch failed:', error.message)
        return null
    }

    return data
}

export async function insertSystem(data: SystemInsert) {
    const { data: result, error } = await supabase
        .from('systems')
        .insert(data)
        .select()
        .single()

    if (error) {
        console.error('Insert system failed:', error.message)
        throw error
    }

    return result
}

export async function updateSystem(id: number, updates: SystemUpdate) {
    const { data, error } = await supabase
        .from('systems')
        .update(updates)
        .eq('id', id)
        .select()
        .single()

    if (error) {
        console.error('Update system failed:', error.message)
        throw error
    }

    return data
}


export async function deleteSystem(id: number) {
    const { error } = await supabase
        .from('systems')
        .delete()
        .eq('id', id)

    if (error) {
        console.error('Delete system failed:', error.message)
        throw error
    }

    return true
}

export async function getSystemsByParentID(parentID: number): Promise<SystemRow[]> {
    const { data, error } = await supabase
        .from('systems')
        .select('*')
        .eq('parent_id', parentID)

    if (error) {
        console.error('Fetch by parent id failed:', error.message)
        return []
    }

    return data
}